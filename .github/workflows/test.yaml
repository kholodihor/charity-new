name: Run unit tests

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: charity
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Set up Go 1.x
        uses: actions/setup-go@v2
        with:
          go-version: ^1.22
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v2

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
          which migrate

      - name: Run migrations
        run: make migrateup

      - name: Install SQLC
        run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

      - name: Install gomock
        run: go install github.com/golang/mock/mockgen@latest

      - name: Generate SQLC code
        run: sqlc generate

      - name: Generate mocks
        run: mockgen -package mockdb -destination db/mock/store.go github.com/kholodihor/charity/db/sqlc Store

      - name: Test database layer
        run: go test -v -short ./db/sqlc

      - name: Test new features
        run: |
          go test -v -short ./api -run "TestCreateAnonymousDonationAPI"
          go test -v -short ./api -run "TestDonationLimits"
          go test -v -short ./api -run "TestRateLimiting"

      - name: Test core API features
        run: |
          go test -v -short ./api -run "TestCreateUserAPI"
          go test -v -short ./api -run "TestLoginUserAPI"
          go test -v -short ./api -run "TestCreateGoalAPI"
          go test -v -short ./api -run "TestCreateEventAPI"