name: CI Pipeline - Tests

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:14-alpine
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: charity
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.22'
        id: go

      - name: Cache Go modules
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/go-build
            ~/go/pkg/mod
          key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
          restore-keys: |
            ${{ runner.os }}-go-

      - name: Install dependencies
        run: go mod download

      - name: Install golang-migrate
        run: |
          curl -L https://github.com/golang-migrate/migrate/releases/download/v4.14.1/migrate.linux-amd64.tar.gz | tar xvz
          sudo mv migrate.linux-amd64 /usr/bin/migrate
          which migrate

      - name: Install SQLC
        run: go install github.com/sqlc-dev/sqlc/cmd/sqlc@latest

      - name: Install gomock
        run: go install github.com/golang/mock/mockgen@latest

      - name: Generate SQLC code
        run: sqlc generate

      - name: Generate mocks
        run: make mock

      - name: Run migrations
        run: make migrateup

      - name: Run all tests
        run: make test

      - name: Test API endpoints
        run: make test-api

      - name: Test donation limits and rate limiting
        run: make test-donation-limits

      - name: Test anonymous donations
        run: make test-anonymous-donations

      - name: Test with race detection
        run: make test-race

      - name: Generate test coverage
        run: make test-coverage

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.out
          flags: unittests
          name: codecov-umbrella