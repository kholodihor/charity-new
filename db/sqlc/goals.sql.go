// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: goals.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createGoal = `-- name: CreateGoal :one
INSERT INTO goals (
  title,
  description,
  target_amount,
  collected_amount,
  is_active
) VALUES (
  $1, $2, $3, $4, $5
) RETURNING id, title, description, target_amount, collected_amount, is_active, created_at
`

type CreateGoalParams struct {
	Title           string      `json:"title"`
	Description     pgtype.Text `json:"description"`
	TargetAmount    pgtype.Int8 `json:"target_amount"`
	CollectedAmount int64       `json:"collected_amount"`
	IsActive        bool        `json:"is_active"`
}

func (q *Queries) CreateGoal(ctx context.Context, arg CreateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, createGoal,
		arg.Title,
		arg.Description,
		arg.TargetAmount,
		arg.CollectedAmount,
		arg.IsActive,
	)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CollectedAmount,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGoal = `-- name: DeleteGoal :exec
DELETE FROM goals
WHERE id = $1
`

func (q *Queries) DeleteGoal(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteGoal, id)
	return err
}

const getGoal = `-- name: GetGoal :one
SELECT id, title, description, target_amount, collected_amount, is_active, created_at FROM goals
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetGoal(ctx context.Context, id int64) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoal, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CollectedAmount,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const getGoalForUpdate = `-- name: GetGoalForUpdate :one
SELECT id, title, description, target_amount, collected_amount, is_active, created_at FROM goals
WHERE id = $1 LIMIT 1
FOR NO KEY UPDATE
`

func (q *Queries) GetGoalForUpdate(ctx context.Context, id int64) (Goal, error) {
	row := q.db.QueryRow(ctx, getGoalForUpdate, id)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CollectedAmount,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}

const listGoals = `-- name: ListGoals :many
SELECT id, title, description, target_amount, collected_amount, is_active, created_at FROM goals
ORDER BY id
LIMIT $1
OFFSET $2
`

type ListGoalsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListGoals(ctx context.Context, arg ListGoalsParams) ([]Goal, error) {
	rows, err := q.db.Query(ctx, listGoals, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Goal{}
	for rows.Next() {
		var i Goal
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Description,
			&i.TargetAmount,
			&i.CollectedAmount,
			&i.IsActive,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGoal = `-- name: UpdateGoal :one
UPDATE goals
SET 
  target_amount = COALESCE($2, target_amount),
  is_active = COALESCE($3, is_active)
WHERE id = $1
RETURNING id, title, description, target_amount, collected_amount, is_active, created_at
`

type UpdateGoalParams struct {
	ID           int64       `json:"id"`
	TargetAmount pgtype.Int8 `json:"target_amount"`
	IsActive     bool        `json:"is_active"`
}

func (q *Queries) UpdateGoal(ctx context.Context, arg UpdateGoalParams) (Goal, error) {
	row := q.db.QueryRow(ctx, updateGoal, arg.ID, arg.TargetAmount, arg.IsActive)
	var i Goal
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Description,
		&i.TargetAmount,
		&i.CollectedAmount,
		&i.IsActive,
		&i.CreatedAt,
	)
	return i, err
}
