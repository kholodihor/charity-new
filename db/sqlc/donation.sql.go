// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: donation.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createDonation = `-- name: CreateDonation :one
INSERT INTO donations (
  goal_id,
  user_id,
  amount,
  is_anonymous
) VALUES (
  $1, $2, $3, $4
) RETURNING id, user_id, goal_id, amount, is_anonymous, created_at
`

type CreateDonationParams struct {
	GoalID      int64       `json:"goal_id"`
	UserID      pgtype.Int8 `json:"user_id"`
	Amount      int64       `json:"amount"`
	IsAnonymous bool        `json:"is_anonymous"`
}

func (q *Queries) CreateDonation(ctx context.Context, arg CreateDonationParams) (Donation, error) {
	row := q.db.QueryRow(ctx, createDonation,
		arg.GoalID,
		arg.UserID,
		arg.Amount,
		arg.IsAnonymous,
	)
	var i Donation
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.GoalID,
		&i.Amount,
		&i.IsAnonymous,
		&i.CreatedAt,
	)
	return i, err
}

const updateGoalCollectedAmount = `-- name: UpdateGoalCollectedAmount :exec
UPDATE goals
SET collected_amount = collected_amount + $2
WHERE id = $1
`

type UpdateGoalCollectedAmountParams struct {
	ID              int64 `json:"id"`
	CollectedAmount int64 `json:"collected_amount"`
}

func (q *Queries) UpdateGoalCollectedAmount(ctx context.Context, arg UpdateGoalCollectedAmountParams) error {
	_, err := q.db.Exec(ctx, updateGoalCollectedAmount, arg.ID, arg.CollectedAmount)
	return err
}
