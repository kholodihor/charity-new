// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: event.sql

package db

import (
	"context"
	"time"

	"github.com/jackc/pgx/v5/pgtype"
)

const bookEvent = `-- name: BookEvent :one
INSERT INTO event_bookings (
  user_id,
  event_id
) VALUES (
  $1, $2
) RETURNING id, user_id, event_id, booked_at
`

type BookEventParams struct {
	UserID  int64 `json:"user_id"`
	EventID int64 `json:"event_id"`
}

func (q *Queries) BookEvent(ctx context.Context, arg BookEventParams) (EventBooking, error) {
	row := q.db.QueryRow(ctx, bookEvent, arg.UserID, arg.EventID)
	var i EventBooking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.BookedAt,
	)
	return i, err
}

const cancelEventBooking = `-- name: CancelEventBooking :exec
DELETE FROM event_bookings
WHERE user_id = $1 AND event_id = $2
`

type CancelEventBookingParams struct {
	UserID  int64 `json:"user_id"`
	EventID int64 `json:"event_id"`
}

func (q *Queries) CancelEventBooking(ctx context.Context, arg CancelEventBookingParams) error {
	_, err := q.db.Exec(ctx, cancelEventBooking, arg.UserID, arg.EventID)
	return err
}

const createEvent = `-- name: CreateEvent :one
INSERT INTO events (
  name,
  place,
  date
) VALUES (
  $1, $2, $3
) RETURNING id, name, place, date, created_at
`

type CreateEventParams struct {
	Name  string    `json:"name"`
	Place string    `json:"place"`
	Date  time.Time `json:"date"`
}

func (q *Queries) CreateEvent(ctx context.Context, arg CreateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, createEvent, arg.Name, arg.Place, arg.Date)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Place,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const deleteEvent = `-- name: DeleteEvent :exec
DELETE FROM events
WHERE id = $1
`

func (q *Queries) DeleteEvent(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteEvent, id)
	return err
}

const getEvent = `-- name: GetEvent :one
SELECT id, name, place, date, created_at FROM events
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetEvent(ctx context.Context, id int64) (Event, error) {
	row := q.db.QueryRow(ctx, getEvent, id)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Place,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}

const getEventBooking = `-- name: GetEventBooking :one
SELECT id, user_id, event_id, booked_at FROM event_bookings
WHERE user_id = $1 AND event_id = $2 LIMIT 1
`

type GetEventBookingParams struct {
	UserID  int64 `json:"user_id"`
	EventID int64 `json:"event_id"`
}

func (q *Queries) GetEventBooking(ctx context.Context, arg GetEventBookingParams) (EventBooking, error) {
	row := q.db.QueryRow(ctx, getEventBooking, arg.UserID, arg.EventID)
	var i EventBooking
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.EventID,
		&i.BookedAt,
	)
	return i, err
}

const isEventBooked = `-- name: IsEventBooked :one
SELECT EXISTS(
  SELECT 1 FROM event_bookings
  WHERE user_id = $1 AND event_id = $2
) as is_booked
`

type IsEventBookedParams struct {
	UserID  int64 `json:"user_id"`
	EventID int64 `json:"event_id"`
}

func (q *Queries) IsEventBooked(ctx context.Context, arg IsEventBookedParams) (bool, error) {
	row := q.db.QueryRow(ctx, isEventBooked, arg.UserID, arg.EventID)
	var is_booked bool
	err := row.Scan(&is_booked)
	return is_booked, err
}

const listEventBookings = `-- name: ListEventBookings :many
SELECT 
  eb.id,
  eb.user_id,
  eb.event_id,
  eb.booked_at,
  u.name as user_name,
  u.email as user_email
FROM event_bookings eb
JOIN users u ON eb.user_id = u.id
WHERE eb.event_id = $1
ORDER BY eb.booked_at DESC
LIMIT $2
OFFSET $3
`

type ListEventBookingsParams struct {
	EventID int64 `json:"event_id"`
	Limit   int32 `json:"limit"`
	Offset  int32 `json:"offset"`
}

type ListEventBookingsRow struct {
	ID        int64       `json:"id"`
	UserID    int64       `json:"user_id"`
	EventID   int64       `json:"event_id"`
	BookedAt  time.Time   `json:"booked_at"`
	UserName  pgtype.Text `json:"user_name"`
	UserEmail string      `json:"user_email"`
}

func (q *Queries) ListEventBookings(ctx context.Context, arg ListEventBookingsParams) ([]ListEventBookingsRow, error) {
	rows, err := q.db.Query(ctx, listEventBookings, arg.EventID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListEventBookingsRow{}
	for rows.Next() {
		var i ListEventBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.BookedAt,
			&i.UserName,
			&i.UserEmail,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listEvents = `-- name: ListEvents :many
SELECT id, name, place, date, created_at FROM events
ORDER BY date ASC
LIMIT $1
OFFSET $2
`

type ListEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListEvents(ctx context.Context, arg ListEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Place,
			&i.Date,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUpcomingEvents = `-- name: ListUpcomingEvents :many
SELECT id, name, place, date, created_at FROM events
WHERE date > NOW()
ORDER BY date ASC
LIMIT $1
OFFSET $2
`

type ListUpcomingEventsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUpcomingEvents(ctx context.Context, arg ListUpcomingEventsParams) ([]Event, error) {
	rows, err := q.db.Query(ctx, listUpcomingEvents, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Event{}
	for rows.Next() {
		var i Event
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Place,
			&i.Date,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUserBookings = `-- name: ListUserBookings :many
SELECT 
  eb.id,
  eb.user_id,
  eb.event_id,
  eb.booked_at,
  e.name as event_name,
  e.place as event_place,
  e.date as event_date
FROM event_bookings eb
JOIN events e ON eb.event_id = e.id
WHERE eb.user_id = $1
ORDER BY eb.booked_at DESC
LIMIT $2
OFFSET $3
`

type ListUserBookingsParams struct {
	UserID int64 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUserBookingsRow struct {
	ID         int64     `json:"id"`
	UserID     int64     `json:"user_id"`
	EventID    int64     `json:"event_id"`
	BookedAt   time.Time `json:"booked_at"`
	EventName  string    `json:"event_name"`
	EventPlace string    `json:"event_place"`
	EventDate  time.Time `json:"event_date"`
}

func (q *Queries) ListUserBookings(ctx context.Context, arg ListUserBookingsParams) ([]ListUserBookingsRow, error) {
	rows, err := q.db.Query(ctx, listUserBookings, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListUserBookingsRow{}
	for rows.Next() {
		var i ListUserBookingsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.EventID,
			&i.BookedAt,
			&i.EventName,
			&i.EventPlace,
			&i.EventDate,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateEvent = `-- name: UpdateEvent :one
UPDATE events
SET 
  name = COALESCE($1, name),
  place = COALESCE($2, place),
  date = COALESCE($3, date)
WHERE id = $4
RETURNING id, name, place, date, created_at
`

type UpdateEventParams struct {
	Name  pgtype.Text        `json:"name"`
	Place pgtype.Text        `json:"place"`
	Date  pgtype.Timestamptz `json:"date"`
	ID    int64              `json:"id"`
}

func (q *Queries) UpdateEvent(ctx context.Context, arg UpdateEventParams) (Event, error) {
	row := q.db.QueryRow(ctx, updateEvent,
		arg.Name,
		arg.Place,
		arg.Date,
		arg.ID,
	)
	var i Event
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Place,
		&i.Date,
		&i.CreatedAt,
	)
	return i, err
}
