// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/kholodihor/charity/db/sqlc (interfaces: Store)

// Package mockdb is a generated GoMock package.
package mockdb

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	db "github.com/kholodihor/charity/db/sqlc"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// BookEvent mocks base method.
func (m *MockStore) BookEvent(arg0 context.Context, arg1 db.BookEventParams) (db.EventBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BookEvent", arg0, arg1)
	ret0, _ := ret[0].(db.EventBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BookEvent indicates an expected call of BookEvent.
func (mr *MockStoreMockRecorder) BookEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BookEvent", reflect.TypeOf((*MockStore)(nil).BookEvent), arg0, arg1)
}

// CancelEventBooking mocks base method.
func (m *MockStore) CancelEventBooking(arg0 context.Context, arg1 db.CancelEventBookingParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelEventBooking", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelEventBooking indicates an expected call of CancelEventBooking.
func (mr *MockStoreMockRecorder) CancelEventBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelEventBooking", reflect.TypeOf((*MockStore)(nil).CancelEventBooking), arg0, arg1)
}

// CreateDonation mocks base method.
func (m *MockStore) CreateDonation(arg0 context.Context, arg1 db.CreateDonationParams) (db.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateDonation", arg0, arg1)
	ret0, _ := ret[0].(db.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateDonation indicates an expected call of CreateDonation.
func (mr *MockStoreMockRecorder) CreateDonation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateDonation", reflect.TypeOf((*MockStore)(nil).CreateDonation), arg0, arg1)
}

// CreateEvent mocks base method.
func (m *MockStore) CreateEvent(arg0 context.Context, arg1 db.CreateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateEvent indicates an expected call of CreateEvent.
func (mr *MockStoreMockRecorder) CreateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateEvent", reflect.TypeOf((*MockStore)(nil).CreateEvent), arg0, arg1)
}

// CreateGoal mocks base method.
func (m *MockStore) CreateGoal(arg0 context.Context, arg1 db.CreateGoalParams) (db.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateGoal indicates an expected call of CreateGoal.
func (mr *MockStoreMockRecorder) CreateGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGoal", reflect.TypeOf((*MockStore)(nil).CreateGoal), arg0, arg1)
}

// CreateUser mocks base method.
func (m *MockStore) CreateUser(arg0 context.Context, arg1 db.CreateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockStoreMockRecorder) CreateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockStore)(nil).CreateUser), arg0, arg1)
}

// DeleteEvent mocks base method.
func (m *MockStore) DeleteEvent(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEvent", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEvent indicates an expected call of DeleteEvent.
func (mr *MockStoreMockRecorder) DeleteEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEvent", reflect.TypeOf((*MockStore)(nil).DeleteEvent), arg0, arg1)
}

// DeleteGoal mocks base method.
func (m *MockStore) DeleteGoal(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteGoal", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteGoal indicates an expected call of DeleteGoal.
func (mr *MockStoreMockRecorder) DeleteGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteGoal", reflect.TypeOf((*MockStore)(nil).DeleteGoal), arg0, arg1)
}

// DeleteUser mocks base method.
func (m *MockStore) DeleteUser(arg0 context.Context, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockStoreMockRecorder) DeleteUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockStore)(nil).DeleteUser), arg0, arg1)
}

// DonateToGoalTx mocks base method.
func (m *MockStore) DonateToGoalTx(arg0 context.Context, arg1 db.DonateToGoalTxParams) (db.DonateToGoalTxResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DonateToGoalTx", arg0, arg1)
	ret0, _ := ret[0].(db.DonateToGoalTxResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DonateToGoalTx indicates an expected call of DonateToGoalTx.
func (mr *MockStoreMockRecorder) DonateToGoalTx(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DonateToGoalTx", reflect.TypeOf((*MockStore)(nil).DonateToGoalTx), arg0, arg1)
}

// GetDonation mocks base method.
func (m *MockStore) GetDonation(arg0 context.Context, arg1 int64) (db.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDonation", arg0, arg1)
	ret0, _ := ret[0].(db.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDonation indicates an expected call of GetDonation.
func (mr *MockStoreMockRecorder) GetDonation(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDonation", reflect.TypeOf((*MockStore)(nil).GetDonation), arg0, arg1)
}

// GetEvent mocks base method.
func (m *MockStore) GetEvent(arg0 context.Context, arg1 int64) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEvent indicates an expected call of GetEvent.
func (mr *MockStoreMockRecorder) GetEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEvent", reflect.TypeOf((*MockStore)(nil).GetEvent), arg0, arg1)
}

// GetEventBooking mocks base method.
func (m *MockStore) GetEventBooking(arg0 context.Context, arg1 db.GetEventBookingParams) (db.EventBooking, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEventBooking", arg0, arg1)
	ret0, _ := ret[0].(db.EventBooking)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEventBooking indicates an expected call of GetEventBooking.
func (mr *MockStoreMockRecorder) GetEventBooking(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEventBooking", reflect.TypeOf((*MockStore)(nil).GetEventBooking), arg0, arg1)
}

// GetGoal mocks base method.
func (m *MockStore) GetGoal(arg0 context.Context, arg1 int64) (db.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoal indicates an expected call of GetGoal.
func (mr *MockStoreMockRecorder) GetGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoal", reflect.TypeOf((*MockStore)(nil).GetGoal), arg0, arg1)
}

// GetGoalForUpdate mocks base method.
func (m *MockStore) GetGoalForUpdate(arg0 context.Context, arg1 int64) (db.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGoalForUpdate", arg0, arg1)
	ret0, _ := ret[0].(db.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGoalForUpdate indicates an expected call of GetGoalForUpdate.
func (mr *MockStoreMockRecorder) GetGoalForUpdate(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGoalForUpdate", reflect.TypeOf((*MockStore)(nil).GetGoalForUpdate), arg0, arg1)
}

// GetUser mocks base method.
func (m *MockStore) GetUser(arg0 context.Context, arg1 int64) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockStoreMockRecorder) GetUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockStore)(nil).GetUser), arg0, arg1)
}

// GetUserByEmail mocks base method.
func (m *MockStore) GetUserByEmail(arg0 context.Context, arg1 string) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByEmail", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByEmail indicates an expected call of GetUserByEmail.
func (mr *MockStoreMockRecorder) GetUserByEmail(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByEmail", reflect.TypeOf((*MockStore)(nil).GetUserByEmail), arg0, arg1)
}

// IsEventBooked mocks base method.
func (m *MockStore) IsEventBooked(arg0 context.Context, arg1 db.IsEventBookedParams) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsEventBooked", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsEventBooked indicates an expected call of IsEventBooked.
func (mr *MockStoreMockRecorder) IsEventBooked(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsEventBooked", reflect.TypeOf((*MockStore)(nil).IsEventBooked), arg0, arg1)
}

// ListDonations mocks base method.
func (m *MockStore) ListDonations(arg0 context.Context, arg1 db.ListDonationsParams) ([]db.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDonations", arg0, arg1)
	ret0, _ := ret[0].([]db.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDonations indicates an expected call of ListDonations.
func (mr *MockStoreMockRecorder) ListDonations(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDonations", reflect.TypeOf((*MockStore)(nil).ListDonations), arg0, arg1)
}

// ListDonationsByGoal mocks base method.
func (m *MockStore) ListDonationsByGoal(arg0 context.Context, arg1 db.ListDonationsByGoalParams) ([]db.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDonationsByGoal", arg0, arg1)
	ret0, _ := ret[0].([]db.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDonationsByGoal indicates an expected call of ListDonationsByGoal.
func (mr *MockStoreMockRecorder) ListDonationsByGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDonationsByGoal", reflect.TypeOf((*MockStore)(nil).ListDonationsByGoal), arg0, arg1)
}

// ListDonationsByUser mocks base method.
func (m *MockStore) ListDonationsByUser(arg0 context.Context, arg1 db.ListDonationsByUserParams) ([]db.Donation, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListDonationsByUser", arg0, arg1)
	ret0, _ := ret[0].([]db.Donation)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListDonationsByUser indicates an expected call of ListDonationsByUser.
func (mr *MockStoreMockRecorder) ListDonationsByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListDonationsByUser", reflect.TypeOf((*MockStore)(nil).ListDonationsByUser), arg0, arg1)
}

// ListEventBookings mocks base method.
func (m *MockStore) ListEventBookings(arg0 context.Context, arg1 db.ListEventBookingsParams) ([]db.ListEventBookingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEventBookings", arg0, arg1)
	ret0, _ := ret[0].([]db.ListEventBookingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEventBookings indicates an expected call of ListEventBookings.
func (mr *MockStoreMockRecorder) ListEventBookings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEventBookings", reflect.TypeOf((*MockStore)(nil).ListEventBookings), arg0, arg1)
}

// ListEvents mocks base method.
func (m *MockStore) ListEvents(arg0 context.Context, arg1 db.ListEventsParams) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEvents", arg0, arg1)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEvents indicates an expected call of ListEvents.
func (mr *MockStoreMockRecorder) ListEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEvents", reflect.TypeOf((*MockStore)(nil).ListEvents), arg0, arg1)
}

// ListGoals mocks base method.
func (m *MockStore) ListGoals(arg0 context.Context, arg1 db.ListGoalsParams) ([]db.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListGoals", arg0, arg1)
	ret0, _ := ret[0].([]db.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListGoals indicates an expected call of ListGoals.
func (mr *MockStoreMockRecorder) ListGoals(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListGoals", reflect.TypeOf((*MockStore)(nil).ListGoals), arg0, arg1)
}

// ListUpcomingEvents mocks base method.
func (m *MockStore) ListUpcomingEvents(arg0 context.Context, arg1 db.ListUpcomingEventsParams) ([]db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUpcomingEvents", arg0, arg1)
	ret0, _ := ret[0].([]db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUpcomingEvents indicates an expected call of ListUpcomingEvents.
func (mr *MockStoreMockRecorder) ListUpcomingEvents(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUpcomingEvents", reflect.TypeOf((*MockStore)(nil).ListUpcomingEvents), arg0, arg1)
}

// ListUserBookings mocks base method.
func (m *MockStore) ListUserBookings(arg0 context.Context, arg1 db.ListUserBookingsParams) ([]db.ListUserBookingsRow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUserBookings", arg0, arg1)
	ret0, _ := ret[0].([]db.ListUserBookingsRow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUserBookings indicates an expected call of ListUserBookings.
func (mr *MockStoreMockRecorder) ListUserBookings(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUserBookings", reflect.TypeOf((*MockStore)(nil).ListUserBookings), arg0, arg1)
}

// ListUsers mocks base method.
func (m *MockStore) ListUsers(arg0 context.Context, arg1 db.ListUsersParams) ([]db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListUsers", arg0, arg1)
	ret0, _ := ret[0].([]db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListUsers indicates an expected call of ListUsers.
func (mr *MockStoreMockRecorder) ListUsers(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListUsers", reflect.TypeOf((*MockStore)(nil).ListUsers), arg0, arg1)
}

// UpdateEvent mocks base method.
func (m *MockStore) UpdateEvent(arg0 context.Context, arg1 db.UpdateEventParams) (db.Event, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEvent", arg0, arg1)
	ret0, _ := ret[0].(db.Event)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateEvent indicates an expected call of UpdateEvent.
func (mr *MockStoreMockRecorder) UpdateEvent(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEvent", reflect.TypeOf((*MockStore)(nil).UpdateEvent), arg0, arg1)
}

// UpdateGoal mocks base method.
func (m *MockStore) UpdateGoal(arg0 context.Context, arg1 db.UpdateGoalParams) (db.Goal, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGoal", arg0, arg1)
	ret0, _ := ret[0].(db.Goal)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateGoal indicates an expected call of UpdateGoal.
func (mr *MockStoreMockRecorder) UpdateGoal(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGoal", reflect.TypeOf((*MockStore)(nil).UpdateGoal), arg0, arg1)
}

// UpdateGoalCollectedAmount mocks base method.
func (m *MockStore) UpdateGoalCollectedAmount(arg0 context.Context, arg1 db.UpdateGoalCollectedAmountParams) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGoalCollectedAmount", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGoalCollectedAmount indicates an expected call of UpdateGoalCollectedAmount.
func (mr *MockStoreMockRecorder) UpdateGoalCollectedAmount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGoalCollectedAmount", reflect.TypeOf((*MockStore)(nil).UpdateGoalCollectedAmount), arg0, arg1)
}

// UpdateUser mocks base method.
func (m *MockStore) UpdateUser(arg0 context.Context, arg1 db.UpdateUserParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockStoreMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockStore)(nil).UpdateUser), arg0, arg1)
}

// UpdateUserBalance mocks base method.
func (m *MockStore) UpdateUserBalance(arg0 context.Context, arg1 db.UpdateUserBalanceParams) (db.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserBalance", arg0, arg1)
	ret0, _ := ret[0].(db.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUserBalance indicates an expected call of UpdateUserBalance.
func (mr *MockStoreMockRecorder) UpdateUserBalance(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserBalance", reflect.TypeOf((*MockStore)(nil).UpdateUserBalance), arg0, arg1)
}
